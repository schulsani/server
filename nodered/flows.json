[
    {
        "id": "82e56c5416ceb0b7",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5b98a8ac.a46758",
        "type": "http in",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "url": "/data",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 560,
        "y": 1200,
        "wires": [
            [
                "f10c4cfae8961698",
                "bba61009.4459f"
            ]
        ]
    },
    {
        "id": "bba61009.4459f",
        "type": "template",
        "z": "82e56c5416ceb0b7",
        "name": "unfall abgesendet page/ daten emmpfangen",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE HTML>\n<html lang=\"de\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Unfall abgesendet</title>\n    <script type=\"text/javascript\">\n        var ws;\n        var wsUri = \"ws://schulsani.local:1880/ws/data\";\n\n        var loc = window.location;\n        console.log(loc);\n        if (loc.protocol === \"https:\") { wsUri = \"wss:\"; }\n\n        function wsConnect() {\n            console.log(\"connect\", wsUri);\n            ws = new WebSocket(wsUri);\n\n            ws.onmessage = function (msg) {\n                var line = \"Unfall wurde abgesendet und wartet auf Bestätigung\";\n                var data = msg.data;\n                line += \"<p>\" + data + \"</p>\";\n                document.getElementById('messages').innerHTML = line;\n            }\n\n            ws.onopen = function () {\n                document.getElementById('status').innerHTML = \"Verbunden\";\n                console.log(\"Verbunden\");\n            }\n\n            ws.onclose = function () {\n                document.getElementById('status').innerHTML = \"Fehler beim Herstellen der Verbindung\";\n                setTimeout(wsConnect, 3000);\n            }\n        }\n    </script>\n    <style>\n        body {\n            margin: 0;\n            padding: 0;\n            font-family: Arial, sans-serif;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            height: 100vh;\n        }\n\n\n        #messages {\n            max-width: 400px;\n            width: 100%;\n            padding: 20px;\n            box-sizing: border-box;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n            margin-top: 20px; /* Added margin for separation from logos */\n        }\n\n\n\n        #status {\n            font-style: italic;\n        }\n            header {\n      background-color: #ffffff;\n      padding: 20px;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n\n    header img#logo2 {\n      max-width: 200px;\n      height: auto;\n      margin-right: 20px;\n      margin-left: 10px;\n    }\n\n    header img#logo1 {\n      max-width: 50px;\n      height: auto;\n      margin-left: 20px;\n      margin-right: 10px;\n\n    }\n\n    </style>\n</head>\n  <header>\n    <img id=\"logo1\" src=\"http://schulsani.local/jf_logo.png\" alt=\"Logo 1\">\n    <img id=\"logo2\" src=\"http://schulsani.local/ohg_logo.png\" alt=\"Logo 2\">\n  </header>\n\n<body onload=\"wsConnect();\" onunload=\"ws.disconnect();\">\n    <div id=\"messages\">Unfall wurde abgesendet und wartet auf Bestätigung</div>\n    <hr/>\n    <div id=\"status\"></div>\n</body>\n</html>",
        "x": 1330,
        "y": 1180,
        "wires": [
            [
                "6ceb930a.93146c"
            ]
        ]
    },
    {
        "id": "6ceb930a.93146c",
        "type": "http response",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1870,
        "y": 960,
        "wires": []
    },
    {
        "id": "bd816b76af90f11e",
        "type": "mqtt out",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "topic": "send",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "61de5090.0f5d9",
        "x": 1805,
        "y": 1100,
        "wires": [],
        "l": false
    },
    {
        "id": "ce22bd8f7a55d6d9",
        "type": "inject",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "unfall",
        "payloadType": "msg",
        "x": 2130,
        "y": 960,
        "wires": [
            [
                "bd816b76af90f11e"
            ]
        ]
    },
    {
        "id": "7ff95a34e99d400c",
        "type": "websocket out",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "server": "fc0e0a42a2d7faab",
        "client": "",
        "x": 1690,
        "y": 1220,
        "wires": []
    },
    {
        "id": "22db17054a39dbef",
        "type": "http response",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1570,
        "y": 880,
        "wires": []
    },
    {
        "id": "ae0eeaa269e5b0c8",
        "type": "http in",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "url": "/data",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1160,
        "y": 1120,
        "wires": [
            [
                "4ce9a5b469f7276a"
            ]
        ]
    },
    {
        "id": "4ce9a5b469f7276a",
        "type": "template",
        "z": "82e56c5416ceb0b7",
        "name": "redict to form",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<meta http-equiv=\"refresh\" content = \"0;url=http://schulsani.local/form.php\">\n",
        "x": 1410,
        "y": 1120,
        "wires": [
            [
                "22db17054a39dbef"
            ]
        ]
    },
    {
        "id": "7976439524eb4997",
        "type": "mqtt in",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "topic": "alarm",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "61de5090.0f5d9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1450,
        "y": 1400,
        "wires": [
            [
                "7ff95a34e99d400c",
                "761d46d0999ef86a"
            ]
        ]
    },
    {
        "id": "761d46d0999ef86a",
        "type": "debug",
        "z": "82e56c5416ceb0b7",
        "name": "Alarm beenden",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1860,
        "y": 1580,
        "wires": []
    },
    {
        "id": "0b0182ddb2022024",
        "type": "mysql",
        "z": "82e56c5416ceb0b7",
        "mydb": "3e05ca2c6348c110",
        "name": "",
        "x": 1080,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "adcd01dc12eb632c",
        "type": "function",
        "z": "82e56c5416ceb0b7",
        "name": "function 1",
        "func": "const jsonString = msg.payload;\ntry {\n    const payload = JSON.parse(jsonString);\n\n    // Nun kannst du auf die einzelnen Werte zugreifen\n    var raum = msg.payload.raum;\n    var unfall = msg.payload.unfall;\n    var alarm = msg.payload.alarm;\n    var code = msg.payload.code;\n\n\n    console.log('Raum:', raum);\n    console.log('Unfall:', unfall);\n    console.log('Alarm:', alarm);\n    console.log('Code:', code);\n    return msg;\n} catch (error) {\n    console.error('Fehler beim Parsen der JSON-Antwort:', error);\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1300,
        "wires": [
            [
                "a4dc7d1085cd2a2c"
            ]
        ]
    },
    {
        "id": "c3a377b8f48a1399",
        "type": "comment",
        "z": "82e56c5416ceb0b7",
        "name": "Flow to insert data into the database",
        "info": "",
        "x": 1220,
        "y": 2180,
        "wires": []
    },
    {
        "id": "a4dc7d1085cd2a2c",
        "type": "debug",
        "z": "82e56c5416ceb0b7",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 1460,
        "wires": []
    },
    {
        "id": "f10c4cfae8961698",
        "type": "json",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 810,
        "y": 1080,
        "wires": [
            [
                "b8258d69c583f91a",
                "adcd01dc12eb632c"
            ]
        ]
    },
    {
        "id": "a83e734ceeb011a6",
        "type": "switch",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Schulsanitäter",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Ersthelfer",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 800,
        "wires": [
            [
                "00d9a376712756df",
                "8e3b53ca09758b9f"
            ],
            [
                "ae07f02ffc9804ad"
            ]
        ]
    },
    {
        "id": "ae07f02ffc9804ad",
        "type": "debug",
        "z": "82e56c5416ceb0b7",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 1220,
        "wires": []
    },
    {
        "id": "b8258d69c583f91a",
        "type": "function",
        "z": "82e56c5416ceb0b7",
        "name": "function 2",
        "func": "// Extrahiere den Typ (type) aus dem JSON-String im Payload\nvar inputPayload = msg.payload;\n\ntry {\n    // Versuche, den JSON-String zu parsen\n    var jsonData = JSON.parse(inputPayload);\n\n    // Extrahiere den Typ aus dem JSON-Objekt\n    var outputType = jsonData.type;\n\n    // Setze den extrahierten Typ als Payload in der Ausgangsnachricht\n    msg.payload = { type: outputType,msg: jsonData };\n    \n    // Gib die Nachricht zurück\n    return msg;\n} catch (error) {\n    // Bei einem Fehler (z. B. ungültiges JSON) gebe eine Fehlermeldung zurück\n    return { payload: \"Fehler beim Parsen des JSON-Strings\" };\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 900,
        "wires": [
            [
                "a83e734ceeb011a6"
            ]
        ]
    },
    {
        "id": "8fda6129c1369a89",
        "type": "inject",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1520,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "00d9a376712756df",
        "type": "function",
        "z": "82e56c5416ceb0b7",
        "name": "Setze msg.payload auf msg.payload.msg",
        "func": "// JavaScript-Code für die Node-RED-Funktion\nmsg.payload = msg.payload.msg\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 720,
        "wires": [
            [
                "bd816b76af90f11e"
            ]
        ]
    },
    {
        "id": "96e2e675791d0dec",
        "type": "debug",
        "z": "82e56c5416ceb0b7",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 1720,
        "wires": []
    },
    {
        "id": "8e3b53ca09758b9f",
        "type": "template",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n  \"messages\": [\n    {\n      \"voice\": \"female\",\n      \"require_input\": 0,\n      \"to\": \"+4917647058784\",\n      \"source\": \"source\",\n      \"body\": \"body\",\n      \"lang\": \"de-de\",\n      \"custom_string\": \"custom_string\",\n      \"machine_detection\": 0\n    }\n  ]\n}\nreturn msg;",
        "output": "str",
        "x": 980,
        "y": 1660,
        "wires": [
            [
                "7ad789aa86bfabd2"
            ]
        ]
    },
    {
        "id": "7ad789aa86bfabd2",
        "type": "twilio out",
        "z": "82e56c5416ceb0b7",
        "twilio": "a40f4bff909beffd",
        "twilioType": "call",
        "url": "",
        "number": "+4917647058784",
        "name": "",
        "x": 1230,
        "y": 1640,
        "wires": []
    },
    {
        "id": "61de5090.0f5d9",
        "type": "mqtt-broker",
        "name": "",
        "broker": "schulsani.local",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "fc0e0a42a2d7faab",
        "type": "websocket-listener",
        "path": "/ws/data",
        "wholemsg": "false"
    },
    {
        "id": "3e05ca2c6348c110",
        "type": "MySQLdatabase",
        "name": "",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "schulsani",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "a40f4bff909beffd",
        "type": "twilio-api",
        "name": "",
        "sid": "AC43575bfd9ee32156c1b111c816167d28",
        "from": "+1 224 269 6574"
    }
]