[
    {
        "id": "82e56c5416ceb0b7",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bba61009.4459f",
        "type": "template",
        "z": "82e56c5416ceb0b7",
        "name": "unfall abgesendet page/ daten emmpfangen",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE HTML>\n<html lang=\"de\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Unfall abgesendet</title>\n    <script type=\"text/javascript\">\n        var ws;\n        var wsUri = \"ws://schulsani.local:1880/ws/data\";\n\n        var loc = window.location;\n        console.log(loc);\n        if (loc.protocol === \"https:\") { wsUri = \"wss:\"; }\n\n        function wsConnect() {\n            console.log(\"connect\", wsUri);\n            ws = new WebSocket(wsUri);\n\n            ws.onmessage = function (msg) {\n                var line = \"Unfall wurde abgesendet und wartet auf Bestätigung\";\n                var data = msg.data;\n                line += \"<p>\" + data + \"</p>\";\n                document.getElementById('messages').innerHTML = line;\n            }\n\n            ws.onopen = function () {\n                document.getElementById('status').innerHTML = \"Verbunden\";\n                console.log(\"Verbunden\");\n            }\n\n            ws.onclose = function () {\n                document.getElementById('status').innerHTML = \"Fehler beim Herstellen der Verbindung\";\n                setTimeout(wsConnect, 3000);\n            }\n        }\n    </script>\n    <style>\n        body {\n            margin: 0;\n            padding: 0;\n            font-family: Arial, sans-serif;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            height: 100vh;\n        }\n\n\n        #messages {\n            max-width: 400px;\n            width: 100%;\n            padding: 20px;\n            box-sizing: border-box;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n            margin-top: 20px; /* Added margin for separation from logos */\n        }\n\n\n\n        #status {\n            font-style: italic;\n        }\n            header {\n      background-color: #ffffff;\n      padding: 20px;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n\n    header img#logo2 {\n      max-width: 200px;\n      height: auto;\n      margin-right: 20px;\n      margin-left: 10px;\n    }\n\n    header img#logo1 {\n      max-width: 50px;\n      height: auto;\n      margin-left: 20px;\n      margin-right: 10px;\n\n    }\n\n    </style>\n</head>\n  <header>\n    <img id=\"logo1\" src=\"http://schulsani.local/jf_logo.png\" alt=\"Logo 1\">\n    <img id=\"logo2\" src=\"http://schulsani.local/ohg_logo.png\" alt=\"Logo 2\">\n  </header>\n\n<body onload=\"wsConnect();\" onunload=\"ws.disconnect();\">\n    <div id=\"messages\">Unfall wurde abgesendet und wartet auf Bestätigung</div>\n    <hr/>\n    <div id=\"status\"></div>\n</body>\n<footer>\nMade with &#10084; by Paul Schmid. <a href=\"https://github.com/schulsani\">Github</a>\n</footer>\n\n</html>",
        "x": 1370,
        "y": 1460,
        "wires": [
            [
                "6ceb930a.93146c"
            ]
        ]
    },
    {
        "id": "6ceb930a.93146c",
        "type": "http response",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1870,
        "y": 1460,
        "wires": []
    },
    {
        "id": "bd816b76af90f11e",
        "type": "mqtt out",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "topic": "send",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "61de5090.0f5d9",
        "x": 2045,
        "y": 660,
        "wires": [],
        "l": false
    },
    {
        "id": "ce22bd8f7a55d6d9",
        "type": "inject",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "unfall",
        "payloadType": "msg",
        "x": 2450,
        "y": 640,
        "wires": [
            [
                "bd816b76af90f11e"
            ]
        ]
    },
    {
        "id": "7ff95a34e99d400c",
        "type": "websocket out",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "server": "fc0e0a42a2d7faab",
        "client": "",
        "x": 1730,
        "y": 2140,
        "wires": []
    },
    {
        "id": "22db17054a39dbef",
        "type": "http response",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1310,
        "y": 1980,
        "wires": []
    },
    {
        "id": "ae0eeaa269e5b0c8",
        "type": "http in",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "url": "/data",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 400,
        "y": 1980,
        "wires": [
            [
                "4ce9a5b469f7276a"
            ]
        ]
    },
    {
        "id": "4ce9a5b469f7276a",
        "type": "template",
        "z": "82e56c5416ceb0b7",
        "name": "redict to form",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<meta http-equiv=\"refresh\" content = \"0;url=http://schulsani.local/form.php\">\n",
        "x": 950,
        "y": 1980,
        "wires": [
            [
                "22db17054a39dbef"
            ]
        ]
    },
    {
        "id": "7976439524eb4997",
        "type": "mqtt in",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "topic": "alarm",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "61de5090.0f5d9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 2050,
        "y": 1600,
        "wires": [
            [
                "761d46d0999ef86a",
                "7ff95a34e99d400c",
                "d7a188ed67dd0780"
            ]
        ]
    },
    {
        "id": "761d46d0999ef86a",
        "type": "debug",
        "z": "82e56c5416ceb0b7",
        "name": "Alarm beenden",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2180,
        "y": 1700,
        "wires": []
    },
    {
        "id": "0b0182ddb2022024",
        "type": "mysql",
        "z": "82e56c5416ceb0b7",
        "mydb": "3e05ca2c6348c110",
        "name": "",
        "x": 1240,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "adcd01dc12eb632c",
        "type": "function",
        "z": "82e56c5416ceb0b7",
        "name": "Sort Data",
        "func": "const jsonString = msg.payload;\ntry {\n    const payload = JSON.parse(jsonString);\n\n    // Nun kannst du auf die einzelnen Werte zugreifen\n    var raum = payload.raum;\n    var unfall = payload.unfall;\n    var art = payload.type;\n\n    msg.payload = \"Raum : \" + raum + \", Unfall : \" + unfall + \", Art : \" + art\n    return msg;\n} catch (error) {\n    console.error('Fehler beim Parsen der JSON-Antwort:', error);\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1080,
        "wires": [
            [
                "a4dc7d1085cd2a2c"
            ]
        ]
    },
    {
        "id": "a4dc7d1085cd2a2c",
        "type": "debug",
        "z": "82e56c5416ceb0b7",
        "name": "SHOW DATA",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 1060,
        "wires": []
    },
    {
        "id": "f10c4cfae8961698",
        "type": "json",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 590,
        "y": 1100,
        "wires": [
            [
                "b8258d69c583f91a",
                "adcd01dc12eb632c",
                "e6eab5fb6728b0cb"
            ]
        ]
    },
    {
        "id": "a83e734ceeb011a6",
        "type": "switch",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Schulsanitäter",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Ersthelfer",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 780,
        "wires": [
            [
                "00d9a376712756df"
            ],
            [
                "1f6127f46e7b9cc3"
            ]
        ]
    },
    {
        "id": "b8258d69c583f91a",
        "type": "function",
        "z": "82e56c5416ceb0b7",
        "name": "Extract type",
        "func": "// Extrahiere den Typ (type) aus dem JSON-String im Payload\nvar inputPayload = msg.payload;\n\ntry {\n    // Versuche, den JSON-String zu parsen\n    var jsonData = JSON.parse(inputPayload);\n\n    // Extrahiere den Typ aus dem JSON-Objekt\n    var outputType = jsonData.type;\n\n    // Setze den extrahierten Typ als Payload in der Ausgangsnachricht\n    msg.payload = { type: outputType,msg: jsonData };\n    \n    // Gib die Nachricht zurück\n    return msg;\n} catch (error) {\n    // Bei einem Fehler (z. B. ungültiges JSON) gebe eine Fehlermeldung zurück\n    return { payload: \"Fehler beim Parsen des JSON-Strings\" };\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 920,
        "wires": [
            [
                "a83e734ceeb011a6"
            ]
        ]
    },
    {
        "id": "00d9a376712756df",
        "type": "function",
        "z": "82e56c5416ceb0b7",
        "name": "Setze msg.payload auf msg.payload.msg",
        "func": "// JavaScript-Code für die Node-RED-Funktion\nmsg.payload = msg.payload.msg\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 660,
        "wires": [
            [
                "bd816b76af90f11e"
            ]
        ]
    },
    {
        "id": "b36aa30.3a7276",
        "type": "http request",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2130,
        "y": 860,
        "wires": [
            [
                "1ef9987c.956c78"
            ]
        ]
    },
    {
        "id": "70154cd4.de1444",
        "type": "change",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2030,
        "y": 940,
        "wires": [
            [
                "b36aa30.3a7276"
            ]
        ]
    },
    {
        "id": "1ef9987c.956c78",
        "type": "debug",
        "z": "82e56c5416ceb0b7",
        "name": "Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2500,
        "y": 860,
        "wires": []
    },
    {
        "id": "98354cd3c321a215",
        "type": "function",
        "z": "82e56c5416ceb0b7",
        "name": "prepare api call",
        "func": "// Access the properties of msg.payload.msg directly\nvar jsonData = msg.payload.msg;\nvar code = msg.payload.code\n// Check if the required fields are present in the message object\nif (jsonData && jsonData.raum && jsonData.unfall) {\n    var raum = jsonData.raum;\n    var unfall = jsonData.unfall;\n    var message = 'Folgender Unfall ist passiert: In ' + raum + ' ist ' + unfall + ' passiert.' + ' Unfall bestätgen: http://schulsani.local:1880/confirm?key=' + code;\n\n    // Construct the URL with proper encoding\n    var phoneNumber = '4917647058784'; // Replace with your phone number\n    var apiKey = '3267041'; // Replace with your API key\n    var whatsappURL = 'https://api.callmebot.com/whatsapp.php?phone=' + encodeURIComponent(phoneNumber) + '&text=' + encodeURIComponent(message) + '&apikey=' + encodeURIComponent(apiKey);\n\n    // Set the constructed URL as the payload in the output message\n    msg.payload = whatsappURL;\n\n    // Return the message\n    return msg;\n} else {\n    // If required fields are missing in the message object, return an error message\n    return { payload: \"Erforderliche Felder (raum und unfall) im Nachrichtenobjekt fehlen.\" };\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 900,
        "wires": [
            [
                "70154cd4.de1444"
            ]
        ]
    },
    {
        "id": "bddb1133cefe09c5",
        "type": "http in",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "url": "/confirm",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 290,
        "y": 1680,
        "wires": [
            [
                "1f5cc42696268344"
            ]
        ]
    },
    {
        "id": "2f6934b6547fbe26",
        "type": "template",
        "z": "82e56c5416ceb0b7",
        "name": "site",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "Unfall wurde bestätigt",
        "x": 950,
        "y": 1680,
        "wires": [
            [
                "d149870cf9632e81",
                "4e31ff7d6dab8a7d"
            ]
        ]
    },
    {
        "id": "d149870cf9632e81",
        "type": "http response",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1310,
        "y": 1800,
        "wires": []
    },
    {
        "id": "4e31ff7d6dab8a7d",
        "type": "change",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Der Alarm wurde vom Ersthelfer bestätigt",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1310,
        "y": 1700,
        "wires": [
            [
                "7ff95a34e99d400c",
                "d7a188ed67dd0780"
            ]
        ]
    },
    {
        "id": "89d56c6a7ff64869",
        "type": "function",
        "z": "82e56c5416ceb0b7",
        "name": "Prepare MSQL",
        "func": "var jsonData = msg.payload;\n\n// Extract properties from jsonData\nvar raum = jsonData.raum;\nvar helfer = jsonData.type;\nvar Art = jsonData.unfall;\n\n// Ensure that extracted values are not null\nif (raum !== undefined && helfer !== undefined && Art !== undefined) {\n    // Construct SQL query\n    msg.topic = \"INSERT INTO data (`Raum`, `Helfer`, `Art`) VALUES (?, ?, ?);\";\n    msg.payload = [raum, helfer, Art];\n} else {\n    node.error(\"One or more properties are missing in jsonData\");\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1320,
        "wires": [
            [
                "0b0182ddb2022024"
            ]
        ]
    },
    {
        "id": "064a9de86b15f156",
        "type": "comment",
        "z": "82e56c5416ceb0b7",
        "name": "When Confirmation Page is reloaded redict to Formular",
        "info": "",
        "x": 1000,
        "y": 1920,
        "wires": []
    },
    {
        "id": "f5c6205266524993",
        "type": "comment",
        "z": "82e56c5416ceb0b7",
        "name": "Save to Mysql for Analytics",
        "info": "",
        "x": 1170,
        "y": 1340,
        "wires": []
    },
    {
        "id": "1047f7a5040f1e79",
        "type": "comment",
        "z": "82e56c5416ceb0b7",
        "name": "Print Data for Debug",
        "info": "",
        "x": 1150,
        "y": 1020,
        "wires": []
    },
    {
        "id": "f66a245697d8bf68",
        "type": "comment",
        "z": "82e56c5416ceb0b7",
        "name": "Sort beetween Schulsanitätern und Ersthelfern",
        "info": "",
        "x": 1110,
        "y": 740,
        "wires": []
    },
    {
        "id": "1370053d4176e90a",
        "type": "comment",
        "z": "82e56c5416ceb0b7",
        "name": "Send MQTT Respond to activate Pager",
        "info": "",
        "x": 1990,
        "y": 600,
        "wires": []
    },
    {
        "id": "efb078da8cda9e7c",
        "type": "comment",
        "z": "82e56c5416ceb0b7",
        "name": "# Beta # Alarm the Ersthelfer via Whatsapp",
        "info": "",
        "x": 2040,
        "y": 800,
        "wires": []
    },
    {
        "id": "6d74f9ca5f0ba5ef",
        "type": "comment",
        "z": "82e56c5416ceb0b7",
        "name": "Show Confirmation on Confirmation Page",
        "info": "",
        "x": 1700,
        "y": 1700,
        "wires": []
    },
    {
        "id": "733ce94ba2aff857",
        "type": "comment",
        "z": "82e56c5416ceb0b7",
        "name": "receive Confirmation from Pager",
        "info": "",
        "x": 2170,
        "y": 1540,
        "wires": []
    },
    {
        "id": "e6a7ead8392a7b9b",
        "type": "comment",
        "z": "82e56c5416ceb0b7",
        "name": "# Beta # receive confirmation from Ersthelfer via confirmation link",
        "info": "",
        "x": 1070,
        "y": 1640,
        "wires": []
    },
    {
        "id": "a7e359e1146a9b91",
        "type": "http in",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "url": "/key",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 300,
        "y": 960,
        "wires": [
            [
                "11d79c23c32ca85b"
            ]
        ]
    },
    {
        "id": "11d79c23c32ca85b",
        "type": "change",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "keys",
                "pt": "global",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "payload.key",
                "pt": "msg",
                "to": "keys",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 880,
        "wires": [
            [
                "83b9334fa3554cbb"
            ]
        ]
    },
    {
        "id": "83b9334fa3554cbb",
        "type": "http response",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 820,
        "wires": []
    },
    {
        "id": "12ab6468d16365a9",
        "type": "http in",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "url": "data",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 340,
        "y": 1280,
        "wires": [
            [
                "d6e656de61acc1d8"
            ]
        ]
    },
    {
        "id": "d6e656de61acc1d8",
        "type": "switch",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "property": "req.query.key",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "keys",
                "vt": "global"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 1280,
        "wires": [
            [
                "f10c4cfae8961698",
                "89d56c6a7ff64869",
                "bba61009.4459f",
                "7f32e98fb6dbfa53"
            ],
            [
                "72cad4a428ced359"
            ]
        ]
    },
    {
        "id": "72cad4a428ced359",
        "type": "template",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Die Authentifizierung ist fehgeschlagen versuche es erneut",
        "output": "str",
        "x": 740,
        "y": 1240,
        "wires": [
            [
                "063061483cdb0f7f"
            ]
        ]
    },
    {
        "id": "063061483cdb0f7f",
        "type": "http response",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 1240,
        "wires": []
    },
    {
        "id": "3c3d38f4ddcc98bb",
        "type": "http in",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "url": "/api",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2340,
        "y": 1380,
        "wires": [
            [
                "a2ad495ed54a04ba"
            ]
        ]
    },
    {
        "id": "aaa9562497861cab",
        "type": "http response",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 3540,
        "y": 1200,
        "wires": []
    },
    {
        "id": "4f1003429537b8f4",
        "type": "switch",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "property": "alarm",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "on",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "off",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2830,
        "y": 1240,
        "wires": [
            [
                "4c0a292fac38d711"
            ],
            [
                "59eb32a4b481b8d2"
            ]
        ]
    },
    {
        "id": "c72c6d9847194e03",
        "type": "http response",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "statusCode": "503",
        "headers": {},
        "x": 3220,
        "y": 1340,
        "wires": []
    },
    {
        "id": "d7a188ed67dd0780",
        "type": "change",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "alarm",
                "pt": "global",
                "to": "off",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1930,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "7f32e98fb6dbfa53",
        "type": "change",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "alarm",
                "pt": "global",
                "to": "on",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "e6eab5fb6728b0cb",
        "type": "change",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "infos",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "4c0a292fac38d711",
        "type": "change",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "infos",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3030,
        "y": 1220,
        "wires": [
            [
                "aaa9562497861cab"
            ]
        ]
    },
    {
        "id": "59eb32a4b481b8d2",
        "type": "change",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Kein Unfall aktiv",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2990,
        "y": 1320,
        "wires": [
            [
                "c72c6d9847194e03"
            ]
        ]
    },
    {
        "id": "35df8d36eac8b41c",
        "type": "switch",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "on",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2650,
        "y": 1220,
        "wires": [
            [
                "4f1003429537b8f4",
                "b5e77771c004321f"
            ],
            [
                "26c0554b4a1a5b80"
            ]
        ]
    },
    {
        "id": "b5e77771c004321f",
        "type": "change",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "alarm",
                "pt": "msg",
                "to": "alarm",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2560,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "6c2c3bbf0c0bc882",
        "type": "http response",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "statusCode": "401",
        "headers": {},
        "x": 3040,
        "y": 1440,
        "wires": []
    },
    {
        "id": "26c0554b4a1a5b80",
        "type": "change",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "falscher api key",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2870,
        "y": 1440,
        "wires": [
            [
                "6c2c3bbf0c0bc882"
            ]
        ]
    },
    {
        "id": "a2ad495ed54a04ba",
        "type": "function",
        "z": "82e56c5416ceb0b7",
        "name": "Check Api Key",
        "func": "var apiKey = msg.payload.key // Extracting the API key from the request URL parameters\n\n// List of valid API keys (replace with your own list)\nvar validApiKeys = [\"e4fYnXN9WhKNfKS34htd8QF\"];\n\n// Check if the provided API key is valid\nif (validApiKeys.includes(apiKey)) {\n    // API key is valid\n    msg.payload = \"on\";\n} else {\n    // API key is not valid\n    msg.statusCode = 403; // Forbidden status code\n    msg.payload = \"Invalid API key\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2520,
        "y": 1300,
        "wires": [
            [
                "35df8d36eac8b41c"
            ]
        ]
    },
    {
        "id": "4f92d8b5080cd6cd",
        "type": "function",
        "z": "82e56c5416ceb0b7",
        "name": "Check Api Key or code",
        "func": "var apiKey = msg.payload.key // Extracting the API key from the request URL parameters\nvar whatsappcodes = msg.codes\n// List of valid API keys (replace with your own list)\nvar validApiKeys = [\"XPJBWp2KY4mULg7L9AAuyKw\"];\n\n// Check if the provided API key is valid\nif (validApiKeys.includes(apiKey)) {\n    // API key is valid\n    msg.payload = \"on\";\n} else {\n    // API key is not valid\n    msg.statusCode = 403; // Forbidden status code\n    msg.payload = whatsappcodes + \"Invalid API key\";\n}\nif (whatsappcodes == apiKey) {\n    // API key is valid\n    msg.payload = \"on\";\n} else {\n    // API key is not valid\n    msg.statusCode = 403; // Forbidden status code\n    msg.payload = whatsappcodes + \"Invalid API key\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1820,
        "wires": [
            [
                "8672032b272e6286"
            ]
        ]
    },
    {
        "id": "ad33d34f41184c8a",
        "type": "change",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Falscher Api Key",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1090,
        "y": 1780,
        "wires": [
            [
                "d149870cf9632e81"
            ]
        ]
    },
    {
        "id": "8672032b272e6286",
        "type": "switch",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "on",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 1700,
        "wires": [
            [
                "2f6934b6547fbe26"
            ],
            [
                "ad33d34f41184c8a"
            ]
        ]
    },
    {
        "id": "1f6127f46e7b9cc3",
        "type": "function",
        "z": "82e56c5416ceb0b7",
        "name": "generate random code",
        "func": "// Generate a random number between min and max (inclusive)\nvar min = 1; // minimum value\nvar max = 10000; // maximum value\nvar randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\n\n// Output the random number\nmsg.payload.code = randomNumber;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 820,
        "wires": [
            [
                "98354cd3c321a215",
                "d03902e0bd55ddf7"
            ]
        ]
    },
    {
        "id": "d03902e0bd55ddf7",
        "type": "change",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "codes",
                "pt": "flow",
                "to": "payload.code",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1520,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "1f5cc42696268344",
        "type": "change",
        "z": "82e56c5416ceb0b7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "codes",
                "pt": "msg",
                "to": "codes",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 1600,
        "wires": [
            [
                "4f92d8b5080cd6cd"
            ]
        ]
    },
    {
        "id": "61de5090.0f5d9",
        "type": "mqtt-broker",
        "name": "",
        "broker": "schulsani.local",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "fc0e0a42a2d7faab",
        "type": "websocket-listener",
        "path": "/ws/data",
        "wholemsg": "false"
    },
    {
        "id": "3e05ca2c6348c110",
        "type": "MySQLdatabase",
        "name": "",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "schulsani",
        "tz": "",
        "charset": "UTF8"
    }
]